import numpy as np
from util import predict, f2_score, pred_csv

thresholds = [
#     [0.22433333, 0.20966667, 0.17,
#      0.07, 0.20433333, 0.23033333,
#      0.156, 0.23033333, 0.19933333,
#      0.21533333, 0.13, 0.156, 0.205,
#      0.208, 0.309, 0.25733333,
#      0.072],                                            # resnet-34, acc 0.92829
#
#     [0.197, 0.21333333, 0.216, 0.092, 0.16666667, 0.15133333,
#      0.178, 0.25033333, 0.165, 0.17566667, 0.184, 0.20566667,
#      0.24933333, 0.233, 0.217, 0.16733333, 0.06],       # resnet-50, acc 0.93020
#
#     [0.16433333, 0.227, 0.17366667,
#      0.05133333, 0.275, 0.16033333,
#      0.1943333, 0.22533333, 0.22033333,
#      0.16833333, 0.16366667, 0.34066667,
#      0.25333333, 0.13466667, 0.29566667,
#      0.209, 0.05533333],                                # resnet-152, 0.929617
#
#     [0.13166667, 0.22266667, 0.26733333,
#      0.062, 0.303, 0.18366667,
#      0.18966667, 0.305, 0.252,
#      0.29033333, 0.18766667, 0.15166667,
#      0.14066667, 0.04766667, 0.41466667,
#      0.26233333, 0.07333333],                           # densenet-121, acc 0.92821
#
#     [0.18533333, 0.18866667, 0.13533333,
#      0.03633333, 0.221, 0.17666667,
#      0.231, 0.23933333, 0.21966667,
#      0.169, 0.23333333, 0.21833333,
#      0.24033333, 0.112, 0.40233333,
#      0.31833333, 0.237],                                # densenet-161, 0.93108
#
#     [0.21266667, 0.18866667, 0.17733333,
#      0.07166667, 0.15366667, 0.14966667,
#      0.153, 0.17866667, 0.15966667,
#      0.15366667, 0.16133333, 0.126,
#      0.19066667, 0.09166667, 0.313,
#      0.25366667, 0.06266667],                           # densenet-169, 0.92856

    [0.167, 0.18633333, 0.206, 0.12966667, 0.26133333, 0.19666667,
      0.218, 0.20933333, 0.21133333, 0.24333333, 0.109, 0.23566667,
      0.168, 0.151, 0.13333333, 0.125, 0.05933333],

    [0.232, 0.185, 0.13233333, 0.13466667, 0.24066667, 0.25233333,
     0.18733333, 0.204, 0.139, 0.163, 0.11866667, 0.128,
     0.11266667, 0.125, 0.17, 0.13733333, 0.10833333],

    [0.165, 0.16166667, 0.201, 0.12366667, 0.24833333, 0.193, 0.201,
     0.178, 0.24766667, 0.25266667, 0.06533333, 0.19433333, 0.18433333,
     0.18466667, 0.223, 0.12666667, 0.04466667],

    [0.21766667, 0.21433333, 0.18966667, 0.12266667, 0.246, 0.169,
     0.18266667, 0.18933333, 0.199, 0.19633333, 0.17866667, 0.266,
     0.20366667, 0.18, 0.23566667, 0.197, 0.201],

    [0.11433333, 0.196, 0.24, 0.06566667, 0.192, 0.169,
     0.21933333, 0.23166667, 0.209, 0.235, 0.21933333, 0.12033333,
     0.13, 0.11033333, 0.39533333, 0.176, 0.09266667],

    [0.21633333, 0.21233333, 0.21833333, 0.13166667, 0.19066667, 0.187,
     0.21666667, 0.21466667, 0.18866667, 0.18966667, 0.18066667, 0.154,
     0.20533333, 0.26833333, 0.19666667, 0.201, 0.18833333],

    [0.22366667, 0.20366667, 0.17166667, 0.14633333, 0.20066667, 0.18966667,
     0.197, 0.20166667, 0.17233333, 0.21466667, 0.15566667, 0.197,
     0.16366667, 0.149,  0.25366667, 0.18333333, 0.26033333]
]

models = [
            resnet18_planet,
            resnet34_planet,
            resnet50_planet,
            resnet152_planet,
            densenet121,
            densenet161,
            densenet169,
        ]

labels = np.empty((len(models), 61191, 17))
for m_idx, model in enumerate(models):
    name = str(model).split()[1]
    preds = np.loadtxt('/mnt/home/dunan/Learn/Kaggle/planet_amazon/submission_probs/full_data_{}.txt'.format(name))
    # get labels
    preds = (preds > thresholds[m_idx]).astype(int)
    labels[m_idx] = preds

# majority voting
labels = labels.sum(axis=0)
labels = (labels >= (len(models)//2)).astype(int)
pred_csv(predictions=labels, name='majority_voting_ensembles_full_data')